/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pandora;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;

/**
 *
 * @author dominikmocher
 */
public class RulesEditor extends javax.swing.JPanel {

    Boolean rolling;
    String collidesWith;
    String ownObject;
    int collisionAction;
    Game actualGame;
    
    /*2D arralist to store collisions into it
    *
    * [0] = own object (from list)
    * [1] = object to collide with (from combo box)
    * [2] = action to perform (from combo box)
    * !attention! action is a string and has to be casted to int
    */
    ArrayList<ArrayList<String>> collisions;
    int indexForInsert;
    
    /**
     * Creates new form RulesEditor
     * @param game
     */
    public RulesEditor(Game game) {
        initComponents();
        actualGame = game;
        this.rolling = false;
        
        //initializing the collision-2D arraylist to avoid exceptions
        indexForInsert = 0;
        collisions = new ArrayList<ArrayList<String>>();
        
        //fills collisions with saved collisions when loading
        if(!actualGame.getCollisions().isEmpty())
        {
            collisions = actualGame.getCollisions();
            System.out.println(collisions.get(0).get(0));
        }
        
        //checks if dices are enabled or if the movement 
        //textfield has to be displayed
        if(game.getDiceEnabled())
        {
            MovementLabel.setText(ConstantStrings.MOVEMENT_DICE);
            Movement.setVisible(false);
        }
        
        //fills list with players to select from
        selectedPlayer.removeAll();
        DefaultListModel list = new DefaultListModel();
        
        for(int i = 0; i < game.getNumberOfPlayers(); i++)
        {
            list.addElement(ConstantStrings.PLAYER + " " + i);
        }

        selectedPlayer.setModel(list); //fills data into jList
        selectedPlayer.setSelectedIndex(0);
        
        //filling combo box with player items
        ContactObjectList.removeAllItems();
        for(int i = 0; i < list.getSize(); i++)
        {
          ContactObjectList.addItem(list.toArray()[i]);
        }
        
        //filling action combo box
        ContactActionBox.removeAllItems();
        String possible_actions[] = {ConstantStrings.ACTION_KILL, 
                                     ConstantStrings.ACTION_IGNORE, 
                                     ConstantStrings.ACTION_JUMP, 
                                     ConstantStrings.ACTION_DO_NOTHING};
        for(int i = 0; i < possible_actions.length; i++)
        {
          ContactActionBox.addItem(possible_actions[i]);
        }

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        selectedPlayer = new javax.swing.JList();
        Movement = new javax.swing.JTextField();
        CollisionLabel = new javax.swing.JLabel();
        ContactObjectList = new javax.swing.JComboBox();
        ContactActionBox = new javax.swing.JComboBox();
        ApplyRules = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        ErrorLabel = new javax.swing.JLabel();
        MovementLabel = new javax.swing.JLabel();

        selectedPlayer.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectedPlayer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectedPlayer.setSelectedIndex(0);
        jScrollPane1.setViewportView(selectedPlayer);

        Movement.setText("3");
        Movement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovementActionPerformed(evt);
            }
        });

        CollisionLabel.setText(ConstantStrings.COLLISION_LABEL);

        ContactObjectList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ContactObjectList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactObjectListActionPerformed(evt);
            }
        });

        ContactActionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ApplyRules.setText(ConstantStrings.APPLY_BUTTON);
        ApplyRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyRulesActionPerformed(evt);
            }
        });

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("-");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        ErrorLabel.setForeground(new java.awt.Color(204, 0, 0));

        MovementLabel.setText(ConstantStrings.MOVEMENT_LABEL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ContactObjectList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContactActionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(11, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ApplyRules))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CollisionLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MovementLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Movement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 166, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MovementLabel)
                            .addComponent(Movement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addComponent(CollisionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ContactObjectList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContactActionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton)
                            .addComponent(RemoveButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ApplyRules)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MovementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovementActionPerformed

    }//GEN-LAST:event_MovementActionPerformed

    private void ApplyRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyRulesActionPerformed
        //resetting ErrorLabel because of eventual previous errors
        ErrorLabel.setText("");
        
        //check if game uses dices, else user should enter number of fields to move
        if(!actualGame.getDiceEnabled())
        {
            try{
                int movement = Integer.parseInt(Movement.getText());
                //checks for boundaries in movement
                if(movement < Constants.LOWER_MOVEMENT_BOUND || movement > Constants.UPPER_MOVEMENT_BOUND)
                {
                    ErrorLabel.setText(ConstantStrings.MOVEMENT_RANGE_NEW);
                }
                else
                {
                    actualGame.setStaticMovement(movement);
                }
            
            
            }
            catch(NumberFormatException e)
            {   
                ErrorLabel.setText(ConstantStrings.MOVEMENT_RANGE);
                System.out.println("Exception " + e.getMessage());
            }
        }
        
        //TODO: Collision-things schould be transported to "Add"-Button
        //getting collision parameters 
        /*ownObject = selectedPlayer.getSelectedValue().toString();
        collidesWith = ContactObjectList.getSelectedItem().toString();
        
        //Printing Errormessage when Objects collide with itself
        if(collidesWith.equals(ownObject))
        {
            ErrorLabel.setText(ConstantStrings.COLLISION_WITH_ITSELF);
        }
        
        collisionAction = ContactActionBox.getSelectedIndex();
        
        //debug output -dm
        System.out.println("object " + ownObject + " performs action " + 
                collisionAction + " on object " + collidesWith);
        System.out.println("Movement is " + actualGame.getStaticMovement());
        */
        //copys collision rules to game class
        actualGame.setCollisions(collisions);
        
        for(int i = 0; i < actualGame.getCollisions().size(); i++)
        {
            System.out.println(actualGame.getCollisions().get(i).get(0) + 
                    " collides with " + 
                    actualGame.getCollisions().get(i).get(1) + 
                    " and performs action " + 
                    actualGame.getCollisions().get(i).get(2));
        }
        
        
    }//GEN-LAST:event_ApplyRulesActionPerformed

    private void ContactObjectListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactObjectListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContactObjectListActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        
        if(!collisions.isEmpty())
        {
            //gets user input
            ArrayList<String> tempList = new ArrayList();
            
            tempList.add(0, selectedPlayer.getSelectedValue().toString());
            tempList.add(1, ContactObjectList.getSelectedItem().toString());
            tempList.add(2, Integer.toString(ContactActionBox.getSelectedIndex()));
            
            //checks for collision with itself
            //TODO: should be in code or not? -> design question
            //TODO: check functionality...
            if(tempList.get(0).equals(tempList.get(1)))
            {
              ErrorLabel.setText(ConstantStrings.COLLISION_WITH_ITSELF);
            }
            
            //get index of an collision rule and removes it, 
            //if a collision rule already exists
            if(collisionExists(collisions, tempList))
            {
                int index = getCollisionIndex(collisions, tempList);
                collisions.remove(index);
            }
            //setting index for inserting to last element of arraylist
            indexForInsert = collisions.size()-1;
            if(indexForInsert < 0)
            {
                indexForInsert = 0;
            }
            
        }
        else
        {
            ErrorLabel.setText(ConstantStrings.ERROR_COLLISION_EMPTY);
        }
        

        
    }//GEN-LAST:event_RemoveButtonActionPerformed

    /*
    *  checks, if an collision strategy exists for two objects
    *  returns index of element, if combination of both objects exists in 2D arraylist
    *
    * @param collisionArray Arraylist to search for the combination
    * @param currentArray Arraylist of combinations to check
    */
    private Boolean collisionExists(ArrayList<ArrayList<String>> collisionArray, ArrayList<String> currentArray)
      {
        int index;
        for(index = 0; index < collisionArray.size(); index++)
        {
            if(collisionArray.get(index).get(0).equals(currentArray.get(0)) &&
               collisionArray.get(index).get(1).equals(currentArray.get(1)))
            {
                return true;
            }
        }
        return false;
      }
    
    
    /*
    *  checks, if an collision strategy exists for two objects
    *  returns true, if combination of both objects exists in 2D arraylist
    *
    * @param collisionArray Arraylist to search for the combination
    * @param currentArray Arraylist of combinations to check
    */
    private int getCollisionIndex(ArrayList<ArrayList<String>> collisionArray, ArrayList<String> currentArray)
      {
        int index;
        for(index = 0; index < collisionArray.size(); index++)
        {
            if(collisionArray.get(index).get(0).equals(currentArray.get(0)) &&
               collisionArray.get(index).get(1).equals(currentArray.get(1)))
            {
                return index;
            }
        }
        return 0;
      }
    
    
    /*
    *  adds collision rule to vector
    *
    *  prints error, if collision rule for the objects already exists
    */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // read full line (combination of 3 objects) and store line at last position in vector
        try{

            ArrayList<String> tempList = new ArrayList();
            
            tempList.add(0, selectedPlayer.getSelectedValue().toString());
            tempList.add(1, ContactObjectList.getSelectedItem().toString());
            tempList.add(2, Integer.toString(ContactActionBox.getSelectedIndex()));
            
            if(!collisionExists(collisions, tempList))
            {         
                collisions.add(indexForInsert, tempList);

                System.out.println(collisions.get(indexForInsert).get(0) + " " + 
                                   collisions.get(indexForInsert).get(1) + " " + 
                                   collisions.get(indexForInsert).get(2));       
                indexForInsert++;
            }
            else
            {
                ErrorLabel.setText(ConstantStrings.COLLISION_EXISTS);
            }
        }
        catch(Exception e)
        {
            System.err.println("Exception " + e.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyRules;
    private javax.swing.JLabel CollisionLabel;
    private javax.swing.JComboBox ContactActionBox;
    private javax.swing.JComboBox ContactObjectList;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JTextField Movement;
    private javax.swing.JLabel MovementLabel;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList selectedPlayer;
    // End of variables declaration//GEN-END:variables
}
